function [y1] = NNModel_Dyna(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 14-May-2019 17:36:17.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 3xQ matrix, input #1
% and returns:
%   y = 3xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [1;1;1];
x1_step1.gain = [0.4;0.25;0.666666666666667];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.14594994815544670708;-8.3840996770128768389;-2.2323254758615242999;-6.8700786665203388281;-7.5823888262133545268;-10.982370135369489361;4.0848851201683027412;8.6485833818156265806;-2.1095311665964477932;-6.8214142108832156453];
IW1_1 = [-0.79344093099437629224 0.014119721302546581546 0.62839081891499559696;17.849930717943397696 -14.398311263470061405 19.175424253415641829;0.95025811308123542265 3.0497646409023277947 -0.89483317731741784939;0.27588982284753205132 12.40199016554505107 -15.034517570850221446;0.14529897991533233248 13.853907936771497234 -16.949140277576841385;22.938855826286420836 -25.019131309305848276 -4.2779438385435701875;2.2772968035251537344 -0.14216409698899176717 5.5631986019980139702;4.3597322903473232358 -0.67030640752793335668 -5.2547965374557845664;-0.5624266151820553894 -3.9222575668289838546 1.086281665602881974;-0.14338341402110418854 0.46092100477804859304 4.7933952664706396263];

% Layer 2
b2 = [0.97069630125211336935;-0.52744684448477330285;6.9092179184486459675];
LW2_1 = [-0.028578709088426981766 0.018957050357740524299 0.003849280654932622954 -0.15799850535686807418 0.1580548465741350439 -0.0018101618879125870067 -0.001026865216914458253 -2.329413364903505812 0.0070230950877942423943 -0.3610847806677284777;-1.1929735833642316489 0.057744310460377722138 0.014514921288056970711 0.59732690130919019467 -0.6055456429310985822 -0.023768452126237727545 0.4306806546374440936 0.2395255004412253641 -0.04583861301448129838 0.052148349773301044818;0.078342542877785761868 -0.086978628285688461275 0.44762689843232267295 11.831011921616383376 -11.760045308747125503 -0.089629852937768900167 -0.039885137394400423105 -0.068612902977133821691 -0.37301277212888905854 6.8141148674583940092];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [2;0.4;0.25];
y1_step1.xoffset = [0;1;1];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
